{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"monzo-api-wrapper","text":"<p>Wrapper for monzo-api package to fetch Monzo transactions and store them in a database.</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.CustomLogger","title":"<code>CustomLogger</code>","text":"<p>Class to create custom loggers using the Loguru package.</p> <p>This class should not be instantiated directly. Use the <code>get_logger</code> class method to retrieve the logger instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Raised if the class constructor is called directly.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>class CustomLogger:\n    \"\"\"Class to create custom loggers using the Loguru package.\n\n    This class should not be instantiated directly. Use the `get_logger` class method\n    to retrieve the logger instance.\n\n    Raises:\n        RuntimeError: Raised if the class constructor is called directly.\n\n    \"\"\"\n\n    logger = None\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the custom logger instance.\n\n        Raises:\n            RuntimeError: Raised if the class constructor is called directly.\n\n        \"\"\"\n        raise RuntimeError\n\n    @classmethod\n    def get_logger(cls) -&gt; loguru.Logger:\n        \"\"\"Retrieve an instance of the logger with customised settings.\n\n        The logger is configured to output logs to stderr with a specified format and\n        log level set by the environment variable `LOG_LEVEL`, defaults to INFO.\n\n        Returns:\n            Logger: An instance of the customised Loguru logger.\n\n        \"\"\"\n        if not cls.logger:\n            cls.logger = loguru_base_logger\n            cls.logger.remove()\n            cls.logger = cls.logger.patch(cls.logger_patch)\n            cls.logger.add(\n                sys.stderr, format=\"{extra[serialized]}\", level=os.getenv(\"LOG_LEVEL\", \"INFO\")\n            )\n\n        return cls.logger\n\n    @classmethod\n    def logger_patch(cls, record: loguru.Record) -&gt; None:\n        \"\"\"Customises the log record format for the Loguru logger.\n\n        This method is used to patch the logger and serialize the log record data into JSON format.\n\n        Args:\n            record (dict[str, Any]): Dictionary containing log record data.\n\n        \"\"\"\n        record[\"extra\"][\"serialized\"] = json.dumps({\n            \"timestamp\": str(record[\"time\"]),\n            \"module\": record[\"name\"],\n            \"function\": record[\"function\"],\n            \"line_number\": record[\"line\"],\n            \"level\": record[\"level\"].name,\n            \"message\": record[\"message\"],\n            \"extra\": record[\"extra\"],\n        })\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.CustomLogger.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the custom logger instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>Raised if the class constructor is called directly.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the custom logger instance.\n\n    Raises:\n        RuntimeError: Raised if the class constructor is called directly.\n\n    \"\"\"\n    raise RuntimeError\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.CustomLogger.get_logger","title":"<code>get_logger()</code>  <code>classmethod</code>","text":"<p>Retrieve an instance of the logger with customised settings.</p> <p>The logger is configured to output logs to stderr with a specified format and log level set by the environment variable <code>LOG_LEVEL</code>, defaults to INFO.</p> <p>Returns:</p> Name Type Description <code>Logger</code> <code>Logger</code> <p>An instance of the customised Loguru logger.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>@classmethod\ndef get_logger(cls) -&gt; loguru.Logger:\n    \"\"\"Retrieve an instance of the logger with customised settings.\n\n    The logger is configured to output logs to stderr with a specified format and\n    log level set by the environment variable `LOG_LEVEL`, defaults to INFO.\n\n    Returns:\n        Logger: An instance of the customised Loguru logger.\n\n    \"\"\"\n    if not cls.logger:\n        cls.logger = loguru_base_logger\n        cls.logger.remove()\n        cls.logger = cls.logger.patch(cls.logger_patch)\n        cls.logger.add(\n            sys.stderr, format=\"{extra[serialized]}\", level=os.getenv(\"LOG_LEVEL\", \"INFO\")\n        )\n\n    return cls.logger\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.CustomLogger.logger_patch","title":"<code>logger_patch(record)</code>  <code>classmethod</code>","text":"<p>Customises the log record format for the Loguru logger.</p> <p>This method is used to patch the logger and serialize the log record data into JSON format.</p> <p>Parameters:</p> Name Type Description Default <code>record</code> <code>dict[str, Any]</code> <p>Dictionary containing log record data.</p> required Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>@classmethod\ndef logger_patch(cls, record: loguru.Record) -&gt; None:\n    \"\"\"Customises the log record format for the Loguru logger.\n\n    This method is used to patch the logger and serialize the log record data into JSON format.\n\n    Args:\n        record (dict[str, Any]): Dictionary containing log record data.\n\n    \"\"\"\n    record[\"extra\"][\"serialized\"] = json.dumps({\n        \"timestamp\": str(record[\"time\"]),\n        \"module\": record[\"name\"],\n        \"function\": record[\"function\"],\n        \"line_number\": record[\"line\"],\n        \"level\": record[\"level\"].name,\n        \"message\": record[\"message\"],\n        \"extra\": record[\"extra\"],\n    })\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.get_aws_context_value","title":"<code>get_aws_context_value(list_of_args, key)</code>","text":"<p>Retrieve a specific value from the AWS context argument based on the provided key.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_args</code> <code>list[tuple[str, Any]]</code> <p>List of arguments from the function.</p> required <code>key</code> <code>str</code> <p>The key to retrieve from the context argument.</p> required <p>Returns:</p> Type Description <code>str | None</code> <p>Optional[str]: The value associated with the key in the AWS context, or None if not found.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>def get_aws_context_value(list_of_args: list[tuple[str, Any]], key: str) -&gt; str | None:\n    \"\"\"Retrieve a specific value from the AWS context argument based on the provided\n    key.\n\n    Args:\n        list_of_args (list[tuple[str, Any]]): List of arguments from the function.\n        key (str): The key to retrieve from the context argument.\n\n    Returns:\n        Optional[str]: The value associated with the key in the AWS context, or None if not found.\n\n    \"\"\"\n    for arg_tuple in list_of_args:\n        if \"context\" in arg_tuple:\n            context_arg = arg_tuple[1]\n            value = getattr(context_arg, key, None)\n            return value if isinstance(value, str) else str(value) if value is not None else None\n    return None\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.get_func_signature","title":"<code>get_func_signature(list_of_args)</code>","text":"<p>Generate a string representation of the function's signature, with parameters filtered and masked as needed.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_args</code> <code>list[tuple[str, Any]]</code> <p>List of arguments passed to the function.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>String representation of the function's signature.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>def get_func_signature(list_of_args: list[tuple[str, Any]]) -&gt; str:\n    \"\"\"Generate a string representation of the function's signature, with parameters\n    filtered and masked as needed.\n\n    Args:\n        list_of_args (list[tuple[str, Any]]): List of arguments passed to the function.\n\n    Returns:\n        str: String representation of the function's signature.\n\n    \"\"\"\n    args_repr = [f\"{a[0]}={a[1]!r}\" for a in list_of_args]\n    return \", \".join(args_repr)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.is_primitive","title":"<code>is_primitive(obj)</code>","text":"<p>Check if an object is an instance of a primitive type.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>Standard Python object.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the object is a primitive type, False otherwise.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>def is_primitive(obj: object) -&gt; bool:\n    \"\"\"Check if an object is an instance of a primitive type.\n\n    Args:\n        obj (Any): Standard Python object.\n\n    Returns:\n        bool: True if the object is a primitive type, False otherwise.\n\n    \"\"\"\n    primitives = (bool, str, int, float, type(None))\n    return isinstance(obj, primitives)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.loggable","title":"<code>loggable(_func=None, *, log_params=True, log_primitive_params_only=True, log_response=False, params_to_mask=None)</code>","text":"<p>Log function execution details.</p> <p>Includies start/end time,parameters, responses, and execution time. By default, only primitive parameters (bool, str, int, float, None) are logged and response values are suppressed unless specified.</p> <p>Parameters:</p> Name Type Description Default <code>_func</code> <code>Callable</code> <p>Function to wrap with the decorator. Defaults to None.</p> <code>None</code> <code>log_params</code> <code>bool</code> <p>Whether to log function parameters. Defaults to True.</p> <code>True</code> <code>log_primitive_params_only</code> <code>bool</code> <p>Whether to log only primitive parameters. Defaults to True.</p> <code>True</code> <code>log_response</code> <code>bool</code> <p>Whether to log function responses. Defaults to False.</p> <code>False</code> <code>params_to_mask</code> <code>Optional[List[str]]</code> <p>List of parameter names to mask in logs. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Callable</code> <code>Callable</code> <p>A wrapped function with logging functionality.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>def loggable(\n    _func: Callable | None = None,\n    *,\n    log_params: bool = True,\n    log_primitive_params_only: bool = True,\n    log_response: bool = False,\n    params_to_mask: list[str] | None = None,\n) -&gt; Callable:\n    \"\"\"Log function execution details.\n\n    Includies start/end time,parameters, responses, and execution time. By default, only primitive\n    parameters (bool, str, int, float, None) are logged and response values\n    are suppressed unless specified.\n\n    Args:\n        _func (Callable, optional): Function to wrap with the decorator. Defaults to None.\n        log_params (bool, optional): Whether to log function parameters. Defaults to True.\n        log_primitive_params_only (bool, optional): Whether to log only primitive parameters. Defaults to True.\n        log_response (bool, optional): Whether to log function responses. Defaults to False.\n        params_to_mask (Optional[List[str]], optional): List of parameter names to mask in logs. Defaults to None.\n\n    Returns:\n        Callable: A wrapped function with logging functionality.\n\n    \"\"\"\n    if params_to_mask is None:\n        params_to_mask = []\n\n    def decorator_log(func: Callable) -&gt; Callable:\n        \"\"\"Wrap the target function and adds logging.\n\n        Args:\n            func (Callable): The function to be wrapped.\n\n        Returns:\n            Callable: The wrapped function with logging added.\n\n        \"\"\"\n\n        @functools.wraps(func)\n        def wrapper(*args: tuple[object, ...], **kwargs: dict[str, object]) -&gt; object:\n            \"\"\"Add logging before and after the decorated function's execution.\n\n            Args:\n                *args (Any): Positional arguments passed to the function.\n                **kwargs (Any): Keyword arguments passed to the function.\n\n            Returns:\n                Any: The result of the decorated function.\n\n            \"\"\"\n            logger = CustomLogger.get_logger()\n\n            # Prepare function signature details\n            sig_keys = inspect.signature(func).parameters.keys()\n            kw_vals = tuple(kwargs[k] for k in sig_keys if kwargs.get(k) is not None)\n            list_of_args = list(zip(sig_keys, args + kw_vals))\n\n            # AWS-specific logging setup if environment variables are available\n            if os.getenv(\"AWS_EXECUTION_ENV\"):\n                aws_request_id = (\n                    os.getenv(\"AWS_REQUEST_ID\")\n                    if func.__name__ not in (\"handler\", \"lambda_handler\")\n                    else get_aws_context_value(list_of_args, \"aws_request_id\")\n                )\n                aws_log_stream_name = (\n                    os.getenv(\"AWS_LAMBDA_LOG_STREAM_NAME\")\n                    if func.__name__ not in (\"handler\", \"lambda_handler\")\n                    else get_aws_context_value(list_of_args, \"log_stream_name\")\n                )\n\n                os.environ[\"AWS_REQUEST_ID\"] = (\n                    aws_request_id\n                    if aws_request_id is not None\n                    and func.__name__ not in (\"handler\", \"lambda_handler\")\n                    else os.getenv(\"AWS_REQUEST_ID\", \"\")\n                )\n\n                logger.configure(\n                    extra={\n                        \"aws_request_id\": aws_request_id,\n                        \"aws_log_stream_name\": aws_log_stream_name,\n                    }\n                )\n\n            # Logging function parameters\n            if log_params:\n                list_of_args = suppress_args_to_mask(list_of_args, params_to_mask)\n                if log_primitive_params_only:\n                    list_of_filtered_args = suppress_non_primitive_args(list_of_args)\n                    signature = get_func_signature(list_of_filtered_args)\n                else:\n                    signature = get_func_signature(list_of_args)\n\n                start_msg = f\"{func.__name__} [{signature}]\"\n            else:\n                start_msg = f\"{func.__name__}\"\n\n            logger.info(start_msg + \" : start\")\n            try:\n                # Measure execution time\n                start = time.perf_counter()\n                result = func(*args, **kwargs)\n                end = time.perf_counter()\n\n                # Log response and execution time\n                base_end_msg = f\"{start_msg} : end : time taken [{round(end - start, 5)}]s : response : [{type(result)}=\"\n                end_msg = (\n                    f\"{base_end_msg}&lt;suppressed&gt;]\"\n                    if not log_response\n                    else f\"{base_end_msg}&lt;{result}&gt;]\"\n                )\n\n                logger.info(end_msg)\n            except Exception:\n                logger.exception(f\"Exception raised in function {func.__name__}.\")\n                raise\n            else:\n                return result\n\n        return wrapper\n\n    if _func is None:\n        return decorator_log\n    return decorator_log(_func)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.suppress_args_to_mask","title":"<code>suppress_args_to_mask(list_of_args, params_to_mask)</code>","text":"<p>Filter out arguments to be masked, replacing them with 'suppressed'.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_args</code> <code>list[tuple[str, Any]]</code> <p>list of function arguments.</p> required <code>params_to_mask</code> <code>list[str]</code> <p>List of string representations of params to mask.</p> required <p>Returns:</p> Type Description <code>list[tuple[str, Any]]</code> <p>list[tuple[str, Any]]: List of arguments with non-primitives suppressed.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>def suppress_args_to_mask(\n    list_of_args: list[tuple[str, Any]], params_to_mask: list[str]\n) -&gt; list[tuple[str, Any]]:\n    \"\"\"Filter out arguments to be masked, replacing them with 'suppressed'.\n\n    Args:\n        list_of_args (list[tuple[str, Any]]): list of function arguments.\n        params_to_mask (list[str]): List of string representations of params to mask.\n\n    Returns:\n        list[tuple[str, Any]]: List of arguments with non-primitives suppressed.\n\n    \"\"\"\n    return [x if x[0] not in params_to_mask else (x[0], \"suppressed\") for x in list_of_args]\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.custom_logger.suppress_non_primitive_args","title":"<code>suppress_non_primitive_args(list_of_args)</code>","text":"<p>Filter out non-primitive arguments, replacing them with 'suppressed'.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_args</code> <code>list[tuple[str, Any]]</code> <p>List of function arguments.</p> required <p>Returns:</p> Type Description <code>list[tuple[str, Any]]</code> <p>list[tuple[str, Any]]: List of arguments with non-primitives suppressed.</p> Source code in <code>src/monzo_api_wrapper/utils/custom_logger.py</code> <pre><code>def suppress_non_primitive_args(list_of_args: list[tuple[str, Any]]) -&gt; list[tuple[str, Any]]:\n    \"\"\"Filter out non-primitive arguments, replacing them with 'suppressed'.\n\n    Args:\n        list_of_args (list[tuple[str, Any]]): List of function arguments.\n\n    Returns:\n        list[tuple[str, Any]]: List of arguments with non-primitives suppressed.\n\n    \"\"\"\n    return [x if is_primitive(x[1]) else (x[0], \"suppressed\") for x in list_of_args]\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.Db","title":"<code>Db</code>","text":"<p>Class to manage connection to a database and perform SQL operations.</p> Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>class Db:\n    \"\"\"Class to manage connection to a database and perform SQL operations.\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the Db class and set up a database engine.\n\n        Initializes the SQLAlchemy engine and logs the connection status.\n\n        \"\"\"\n        self.engine = self.create_db_engine()\n        logger.debug(f\"Connected to database: {os.getenv('DB_NAME')}\")\n\n    def create_db_engine(self) -&gt; Engine:\n        \"\"\"Create an SQLAlchemy engine for the database connection.\n\n        Returns:\n            Engine: An SQLAlchemy Engine instance configured with database connection details.\n\n        \"\"\"\n        username = os.getenv(\"DB_USER\")\n        password = os.getenv(\"DB_PASS\")\n        host = os.getenv(\"DB_HOST\")\n        database_type = os.getenv(\"DB_TYPE\")\n        database_name = os.getenv(\"DB_NAME\")\n        port = os.getenv(\"DB_PORT\")\n        sql_string = f\"{database_type}://{username}:{password}@{host}:{port}/{database_name}?gssencmode=disable\"\n        return create_engine(sql_string)\n\n    def query(self, sql: str, return_data: bool = True) -&gt; Optional[pd.DataFrame]:\n        \"\"\"Execute an SQL query against the database.\n\n        Args:\n            sql (str): The SQL query to be executed.\n            return_data (bool, optional): If True, returns query data as a DataFrame. Defaults to True.\n\n        Returns:\n            Optional[pd.DataFrame]: DataFrame with query results if return_data=True, else None.\n\n        \"\"\"\n        if return_data:\n            return pd.read_sql_query(sql, self.engine)\n        with self.engine.begin() as conn:\n            conn.execute(sqlalchemy.text(sql))\n        return None\n\n    def insert(\n        self, table: str, df: Optional[pd.DataFrame] = None, sql: Optional[str] = None\n    ) -&gt; None:\n        \"\"\"Insert data into a table in the database.\n\n        Args:\n            table (str): The name of the target database table.\n            df (Optional[pd.DataFrame]): DataFrame containing data to insert. Defaults to None.\n            sql (Optional[str]): Custom SQL insert statement. Defaults to None.\n\n        Raises:\n            InsertArgumentError: If both `df` and `sql` are None.\n\n        \"\"\"\n        if df is None and not sql:\n            raise InsertArgumentError()\n\n        if sql:\n            insert_sql = f\"INSERT INTO {table} (\\n{sql}\\n);\"\n            self.query(insert_sql, return_data=False)\n            logger.debug(f\"Data inserted into {table}\")\n        else:\n            if df is not None:\n                rows = len(df)\n                chunksize = 20000 if rows &gt; 20000 else None\n                schema, table_name = table.split(\".\")\n                with self.engine.begin() as conn:\n                    df.to_sql(\n                        schema=schema,\n                        name=table_name,\n                        index=False,\n                        con=conn,\n                        if_exists=\"append\",\n                        method=\"multi\",\n                        chunksize=chunksize,\n                    )\n                logger.debug(f\"{rows} rows inserted into {schema}.{table_name}\")\n\n    def delete(self, table: str, data: str) -&gt; None:\n        \"\"\"Delete data from a table in the database.\n\n        Args:\n            table (str): The name of the database table from which data will be deleted.\n            data (str): Condition to specify which rows to delete, formatted as a SQL condition.\n\n        \"\"\"\n        sql_delete = sql_templates.delete.format(table=table, data=data)\n        logger.info(f\"Running delete statement: {sql_delete}\")\n        self.query(sql=sql_delete, return_data=False)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.Db.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the Db class and set up a database engine.</p> <p>Initializes the SQLAlchemy engine and logs the connection status.</p> Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the Db class and set up a database engine.\n\n    Initializes the SQLAlchemy engine and logs the connection status.\n\n    \"\"\"\n    self.engine = self.create_db_engine()\n    logger.debug(f\"Connected to database: {os.getenv('DB_NAME')}\")\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.Db.create_db_engine","title":"<code>create_db_engine()</code>","text":"<p>Create an SQLAlchemy engine for the database connection.</p> <p>Returns:</p> Name Type Description <code>Engine</code> <code>Engine</code> <p>An SQLAlchemy Engine instance configured with database connection details.</p> Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>def create_db_engine(self) -&gt; Engine:\n    \"\"\"Create an SQLAlchemy engine for the database connection.\n\n    Returns:\n        Engine: An SQLAlchemy Engine instance configured with database connection details.\n\n    \"\"\"\n    username = os.getenv(\"DB_USER\")\n    password = os.getenv(\"DB_PASS\")\n    host = os.getenv(\"DB_HOST\")\n    database_type = os.getenv(\"DB_TYPE\")\n    database_name = os.getenv(\"DB_NAME\")\n    port = os.getenv(\"DB_PORT\")\n    sql_string = f\"{database_type}://{username}:{password}@{host}:{port}/{database_name}?gssencmode=disable\"\n    return create_engine(sql_string)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.Db.delete","title":"<code>delete(table, data)</code>","text":"<p>Delete data from a table in the database.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>str</code> <p>The name of the database table from which data will be deleted.</p> required <code>data</code> <code>str</code> <p>Condition to specify which rows to delete, formatted as a SQL condition.</p> required Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>def delete(self, table: str, data: str) -&gt; None:\n    \"\"\"Delete data from a table in the database.\n\n    Args:\n        table (str): The name of the database table from which data will be deleted.\n        data (str): Condition to specify which rows to delete, formatted as a SQL condition.\n\n    \"\"\"\n    sql_delete = sql_templates.delete.format(table=table, data=data)\n    logger.info(f\"Running delete statement: {sql_delete}\")\n    self.query(sql=sql_delete, return_data=False)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.Db.insert","title":"<code>insert(table, df=None, sql=None)</code>","text":"<p>Insert data into a table in the database.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>str</code> <p>The name of the target database table.</p> required <code>df</code> <code>Optional[DataFrame]</code> <p>DataFrame containing data to insert. Defaults to None.</p> <code>None</code> <code>sql</code> <code>Optional[str]</code> <p>Custom SQL insert statement. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>InsertArgumentError</code> <p>If both <code>df</code> and <code>sql</code> are None.</p> Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>def insert(\n    self, table: str, df: Optional[pd.DataFrame] = None, sql: Optional[str] = None\n) -&gt; None:\n    \"\"\"Insert data into a table in the database.\n\n    Args:\n        table (str): The name of the target database table.\n        df (Optional[pd.DataFrame]): DataFrame containing data to insert. Defaults to None.\n        sql (Optional[str]): Custom SQL insert statement. Defaults to None.\n\n    Raises:\n        InsertArgumentError: If both `df` and `sql` are None.\n\n    \"\"\"\n    if df is None and not sql:\n        raise InsertArgumentError()\n\n    if sql:\n        insert_sql = f\"INSERT INTO {table} (\\n{sql}\\n);\"\n        self.query(insert_sql, return_data=False)\n        logger.debug(f\"Data inserted into {table}\")\n    else:\n        if df is not None:\n            rows = len(df)\n            chunksize = 20000 if rows &gt; 20000 else None\n            schema, table_name = table.split(\".\")\n            with self.engine.begin() as conn:\n                df.to_sql(\n                    schema=schema,\n                    name=table_name,\n                    index=False,\n                    con=conn,\n                    if_exists=\"append\",\n                    method=\"multi\",\n                    chunksize=chunksize,\n                )\n            logger.debug(f\"{rows} rows inserted into {schema}.{table_name}\")\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.Db.query","title":"<code>query(sql, return_data=True)</code>","text":"<p>Execute an SQL query against the database.</p> <p>Parameters:</p> Name Type Description Default <code>sql</code> <code>str</code> <p>The SQL query to be executed.</p> required <code>return_data</code> <code>bool</code> <p>If True, returns query data as a DataFrame. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[DataFrame]</code> <p>Optional[pd.DataFrame]: DataFrame with query results if return_data=True, else None.</p> Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>def query(self, sql: str, return_data: bool = True) -&gt; Optional[pd.DataFrame]:\n    \"\"\"Execute an SQL query against the database.\n\n    Args:\n        sql (str): The SQL query to be executed.\n        return_data (bool, optional): If True, returns query data as a DataFrame. Defaults to True.\n\n    Returns:\n        Optional[pd.DataFrame]: DataFrame with query results if return_data=True, else None.\n\n    \"\"\"\n    if return_data:\n        return pd.read_sql_query(sql, self.engine)\n    with self.engine.begin() as conn:\n        conn.execute(sqlalchemy.text(sql))\n    return None\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.InsertArgumentError","title":"<code>InsertArgumentError</code>","text":"<p>               Bases: <code>ValueError</code></p> <p>Custom exception raised when both DataFrame and SQL string arguments are missing for an insert operation.</p> <p>This exception is used to ensure that at least one valid data source (a DataFrame or an SQL string) is provided when attempting to insert data into the database.</p> Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>class InsertArgumentError(ValueError):\n    \"\"\"Custom exception raised when both DataFrame and SQL string arguments are missing\n    for an insert operation.\n\n    This exception is used to ensure that at least one valid data source (a\n    DataFrame or an SQL string) is provided when attempting to insert data into\n    the database.\n\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize the InsertArgumentError exception with a specific error message.\n\n        This constructor sets the error message that indicates that either a\n        DataFrame or an SQL string must be provided for an insert operation.\n\n        The error message is passed to the base ValueError class.\n\n        \"\"\"\n        super().__init__(\n            \"Either a DataFrame or SQL string must be provided for the insert operation.\"\n        )\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.utils.db.InsertArgumentError.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the InsertArgumentError exception with a specific error message.</p> <p>This constructor sets the error message that indicates that either a DataFrame or an SQL string must be provided for an insert operation.</p> <p>The error message is passed to the base ValueError class.</p> Source code in <code>src/monzo_api_wrapper/utils/db.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initialize the InsertArgumentError exception with a specific error message.\n\n    This constructor sets the error message that indicates that either a\n    DataFrame or an SQL string must be provided for an insert operation.\n\n    The error message is passed to the base ValueError class.\n\n    \"\"\"\n    super().__init__(\n        \"Either a DataFrame or SQL string must be provided for the insert operation.\"\n    )\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.get_transactions.get_transactions_df","title":"<code>get_transactions_df(monzo_auth, account_id, account_name, days_lookback=30)</code>","text":"<p>Fetch recent transactions from Monzo API.</p> <p>Parameters:</p> Name Type Description Default <code>monzo_auth</code> <code>Authentication</code> <p>Monzo authentication object.</p> required <code>account_id</code> <code>str</code> <p>Monzo account ID.</p> required <code>account_name</code> <code>str</code> <p>Monzo account name.</p> required <code>days_lookback</code> <code>int</code> <p>Number of days to look back, defaults to 30.</p> <code>30</code> <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame of fetched transactions.</p> Source code in <code>src/monzo_api_wrapper/get_transactions.py</code> <pre><code>@loggable\ndef get_transactions_df(\n    monzo_auth: Authentication, account_id: str, account_name: str, days_lookback: int = 30\n) -&gt; pd.DataFrame:\n    \"\"\"Fetch recent transactions from Monzo API.\n\n    Args:\n        monzo_auth (Authentication): Monzo authentication object.\n        account_id (str): Monzo account ID.\n        account_name (str): Monzo account name.\n        days_lookback (int): Number of days to look back, defaults to 30.\n\n    Returns:\n        pd.DataFrame: DataFrame of fetched transactions.\n\n    \"\"\"\n    try:\n        since_date = datetime.today() - timedelta(days=days_lookback)\n        fetched_transactions_list = Transaction.fetch(\n            auth=monzo_auth,\n            account_id=account_id,\n            since=since_date,\n            expand=[\"merchant\"],\n        )\n        logger.debug(f\"Fetched {len(fetched_transactions_list)} transactions from {account_name}\")\n\n        if not fetched_transactions_list:\n            logger.debug(\n                f\"No transactions found for {account_name} over the last {days_lookback} days.\"\n            )\n            return pd.DataFrame()\n\n        return pd.DataFrame([\n            {\n                \"id\": trn.transaction_id,\n                \"date\": trn.created,\n                \"description\": trn.description,\n                \"amount\": trn.amount,\n                \"category\": trn.category,\n                \"decline_reason\": trn.decline_reason,\n                \"meta\": trn.metadata,\n                \"merchant\": trn.merchant,\n                \"currency\": trn.currency,\n                \"local_currency\": trn.local_currency,\n                \"local_amount\": trn.local_amount,\n                \"source\": account_name,\n            }\n            for trn in fetched_transactions_list\n        ])\n\n    except Exception:\n        logger.exception(f\"Error fetching transactions for {account_name}\")\n        raise\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.get_balances.get_balances","title":"<code>get_balances(monzo_auth, source_account)</code>","text":"<p>Fetch and process balances from Monzo pots.</p> <p>Parameters:</p> Name Type Description Default <code>monzo_auth</code> <code>object</code> <p>Monzo authentication object.</p> required <code>source_account</code> <code>str</code> <p>Monzo source account ID.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the balances and details of pots.</p> Source code in <code>src/monzo_api_wrapper/get_balances.py</code> <pre><code>@loggable\ndef get_balances(monzo_auth: Authentication, source_account: str) -&gt; pd.DataFrame:\n    \"\"\"Fetch and process balances from Monzo pots.\n\n    Args:\n        monzo_auth (object): Monzo authentication object.\n        source_account (str): Monzo source account ID.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the balances and details of pots.\n\n    \"\"\"\n    fetched_pots = Pot.fetch(auth=monzo_auth, account_id=source_account)\n    pots_data = [\n        (pot.pot_id, pot.name, pot.style, pot.balance / 100, pot.currency, pot.deleted)\n        for pot in fetched_pots\n    ]\n\n    columns = [\"id\", \"name\", \"style\", \"balance\", \"currency\", \"deleted\"]\n    return pd.DataFrame(pots_data, columns=columns)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_transactions.NoTransactionsFoundError","title":"<code>NoTransactionsFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception raised when no transactions are found in the database.</p> Source code in <code>src/monzo_api_wrapper/upload_transactions.py</code> <pre><code>class NoTransactionsFoundError(Exception):\n    \"\"\"Exception raised when no transactions are found in the database.\"\"\"\n\n    def __init__(self, message: str = \"No transactions found in database.\") -&gt; None:\n        \"\"\"Initializes the NoTransactionsFoundError exception.\n\n        Args:\n            message (str): A custom error message to describe the exception.\n                           Defaults to \"No transactions found in database.\"\n\n        \"\"\"\n        self.message = message\n        super().__init__(self.message)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_transactions.NoTransactionsFoundError.__init__","title":"<code>__init__(message='No transactions found in database.')</code>","text":"<p>Initializes the NoTransactionsFoundError exception.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>A custom error message to describe the exception.            Defaults to \"No transactions found in database.\"</p> <code>'No transactions found in database.'</code> Source code in <code>src/monzo_api_wrapper/upload_transactions.py</code> <pre><code>def __init__(self, message: str = \"No transactions found in database.\") -&gt; None:\n    \"\"\"Initializes the NoTransactionsFoundError exception.\n\n    Args:\n        message (str): A custom error message to describe the exception.\n                       Defaults to \"No transactions found in database.\"\n\n    \"\"\"\n    self.message = message\n    super().__init__(self.message)\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_transactions.get_changed_transaction_ids","title":"<code>get_changed_transaction_ids(db, table, fetched_transactions)</code>","text":"<p>Identify transactions that have changed based on a set of columns.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Db</code> <p>Database connection object.</p> required <code>table</code> <code>str</code> <p>Name of the table to check transactions against.</p> required <code>fetched_transactions</code> <code>DataFrame</code> <p>DataFrame containing fetched transactions.</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>Optional[List[str]]: List of transactions IDs that have changed, or None if no changes are found.</p> <p>Raises:</p> Type Description <code>NoTransactionsFoundError</code> <p>If no transactions are found in the database.</p> Source code in <code>src/monzo_api_wrapper/upload_transactions.py</code> <pre><code>@loggable\ndef get_changed_transaction_ids(\n    db: Db, table: str, fetched_transactions: pd.DataFrame\n) -&gt; list[str]:\n    \"\"\"Identify transactions that have changed based on a set of columns.\n\n    Args:\n        db (Db): Database connection object.\n        table (str): Name of the table to check transactions against.\n        fetched_transactions (pd.DataFrame): DataFrame containing fetched transactions.\n\n    Returns:\n       Optional[List[str]]: List of transactions IDs that have changed, or None if no changes are found.\n\n    Raises:\n        NoTransactionsFoundError: If no transactions are found in the database.\n\n    \"\"\"\n    compare_transaction_cols = [\"id\", \"description\", \"amount\", \"category\", \"notes\", \"timestamp\"]\n\n    logger.debug(\"Getting existing transactions from database\")\n    db_transactions = get_db_transactions(db, table)\n    if db_transactions.empty:\n        raise NoTransactionsFoundError()\n\n    logger.debug(\"Standardizing columns for comparison\")\n    db_transactions[\"date\"] = pd.to_datetime(db_transactions[\"date\"])\n    fetched_transactions[\"date\"] = pd.to_datetime(fetched_transactions[\"date\"])\n    db_transactions[\"amount\"] = db_transactions[\"amount\"].round(2)\n\n    logger.debug(\"Creating comparable subsets of database and fetched transactions\")\n    fetched_transactions_subset = (\n        fetched_transactions[fetched_transactions[\"id\"].isin(db_transactions[\"id\"])][\n            compare_transaction_cols\n        ]\n        .sort_values(\"id\")\n        .reset_index(drop=True)\n    )  # Exclude any new transactions not in database\n    fetched_transactions_subset.fillna(\"\", inplace=True)\n    db_transactions_subset = (\n        db_transactions[db_transactions[\"id\"].isin(fetched_transactions[\"id\"])][\n            compare_transaction_cols\n        ]\n        .sort_values(\"id\")\n        .reset_index(drop=True)\n    )\n    db_transactions_subset.fillna(\"\", inplace=True)\n\n    logger.debug(\"Comparing transactions to identify differences\")\n\n    differences = (\n        fetched_transactions_subset[compare_transaction_cols[1:]]  # Exclude 'id' column\n        .ne(db_transactions_subset[compare_transaction_cols[1:]])\n        .any(axis=1)\n    )\n    return fetched_transactions_subset.loc[differences, \"id\"].tolist()\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_transactions.get_db_transactions","title":"<code>get_db_transactions(db, table)</code>","text":"<p>Fetch transactions from the database.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Db</code> <p>Database connection object.</p> required <code>table</code> <code>str</code> <p>Name of the table to fetch transactions from.</p> required <p>Returns:</p> Type Description <code>DataFrame | None</code> <p>pd.DataFrame | None: DataFrame containing the transactions fetched from the database.</p> Source code in <code>src/monzo_api_wrapper/upload_transactions.py</code> <pre><code>@loggable\ndef get_db_transactions(db: Db, table: str) -&gt; pd.DataFrame | None:\n    \"\"\"Fetch transactions from the database.\n\n    Args:\n        db (Db): Database connection object.\n        table (str): Name of the table to fetch transactions from.\n\n    Returns:\n        pd.DataFrame | None: DataFrame containing the transactions fetched from the database.\n\n    \"\"\"\n    return db.query(\n        sql=sql_templates.exists.format(table=table),\n        return_data=True,\n    )\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_transactions.get_new_transactions","title":"<code>get_new_transactions(db, table, fetched_transactions)</code>","text":"<p>Identify new transactions that are not present in the database.</p> <p>Parameters:</p> Name Type Description Default <code>db</code> <code>Db</code> <p>Database connection object.</p> required <code>table</code> <code>str</code> <p>Name of the table to check transactions against.</p> required <code>fetched_transactions</code> <code>DataFrame</code> <p>DataFrame containing fetched transactions.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing new transactions to be uploaded.</p> Source code in <code>src/monzo_api_wrapper/upload_transactions.py</code> <pre><code>@loggable\ndef get_new_transactions(db: Db, table: str, fetched_transactions: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Identify new transactions that are not present in the database.\n\n    Args:\n        db (Db): Database connection object.\n        table (str): Name of the table to check transactions against.\n        fetched_transactions (pd.DataFrame): DataFrame containing fetched transactions.\n\n    Returns:\n        pd.DataFrame: DataFrame containing new transactions to be uploaded.\n\n    \"\"\"\n    db_transactions = get_db_transactions(db, table)\n    db_ids_lst = db_transactions[\"id\"].tolist() if db_transactions is not None else []\n\n    new_transaction_ids = [\n        item for item in fetched_transactions[\"id\"].tolist() if item not in db_ids_lst\n    ]\n\n    return fetched_transactions[fetched_transactions[\"id\"].isin(new_transaction_ids)].reset_index(\n        drop=True\n    )\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_balances.get_changed_balances","title":"<code>get_changed_balances(database, table_name, current_balances)</code>","text":"<p>Identify balances that have changed compared to the ones in the database.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Db</code> <p>Database connection object.</p> required <code>table_name</code> <code>str</code> <p>Name of the table to check for existing balances.</p> required <code>current_balances</code> <code>DataFrame</code> <p>DataFrame containing the current balances.</p> required <p>Returns:</p> Type Description <code>DataFrame | Any</code> <p>pd.DataFrame: DataFrame containing the balances that have changed.</p> Source code in <code>src/monzo_api_wrapper/upload_balances.py</code> <pre><code>@loggable\ndef get_changed_balances(\n    database: Db, table_name: str, current_balances: pd.DataFrame\n) -&gt; pd.DataFrame | Any:\n    \"\"\"Identify balances that have changed compared to the ones in the database.\n\n    Args:\n        database (Db): Database connection object.\n        table_name (str): Name of the table to check for existing balances.\n        current_balances (pd.DataFrame): DataFrame containing the current balances.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the balances that have changed.\n\n    \"\"\"\n    existing_balances = _get_uploaded_balances(database, table_name)\n    if existing_balances is None:\n        return pd.DataFrame()\n\n    existing_balance_ids = set(existing_balances[\"id\"])\n    matched_balances = _prepare_balances(\n        current_balances[current_balances[\"id\"].isin(existing_balance_ids)]\n    )\n    matched_existing_balances = _prepare_balances(\n        existing_balances[existing_balances[\"id\"].isin(matched_balances[\"id\"])]\n    )\n\n    # Return rows where any column value has changed\n    return matched_balances[matched_existing_balances.ne(matched_balances).any(axis=1)]\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_balances.get_new_balances","title":"<code>get_new_balances(database, table_name, current_balances)</code>","text":"<p>Identify new balances that are not yet uploaded to the database.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Db</code> <p>Database connection object.</p> required <code>table_name</code> <code>str</code> <p>Name of the table to check for existing balances.</p> required <code>current_balances</code> <code>DataFrame</code> <p>DataFrame containing the current balances.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: DataFrame containing the new balances to be uploaded.</p> Source code in <code>src/monzo_api_wrapper/upload_balances.py</code> <pre><code>@loggable\ndef get_new_balances(database: Db, table_name: str, current_balances: pd.DataFrame) -&gt; pd.DataFrame:\n    \"\"\"Identify new balances that are not yet uploaded to the database.\n\n    Args:\n        database (Db): Database connection object.\n        table_name (str): Name of the table to check for existing balances.\n        current_balances (pd.DataFrame): DataFrame containing the current balances.\n\n    Returns:\n        pd.DataFrame: DataFrame containing the new balances to be uploaded.\n\n    \"\"\"\n    existing_balances = _get_uploaded_balances(database, table_name)\n    if existing_balances is not None:\n        existing_balance_ids = set(existing_balances[\"id\"])\n        new_balances = current_balances[~current_balances[\"id\"].isin(existing_balance_ids)]\n        return new_balances.reset_index(drop=True)\n    return current_balances\n</code></pre>"},{"location":"modules/#monzo_api_wrapper.upload_balances.update_changed_balances","title":"<code>update_changed_balances(database, table_name, current_balances, updated_balances)</code>","text":"<p>Update the balances in the database by deleting and reinserting the changed balances.</p> <p>Parameters:</p> Name Type Description Default <code>database</code> <code>Db</code> <p>Database connection object.</p> required <code>table_name</code> <code>str</code> <p>Name of the table to update balances.</p> required <code>current_balances</code> <code>DataFrame</code> <p>DataFrame containing the current balances.</p> required <code>updated_balances</code> <code>DataFrame</code> <p>DataFrame containing the balances that have changed.</p> required Source code in <code>src/monzo_api_wrapper/upload_balances.py</code> <pre><code>@loggable\ndef update_changed_balances(\n    database: Db, table_name: str, current_balances: pd.DataFrame, updated_balances: pd.DataFrame\n) -&gt; None:\n    \"\"\"Update the balances in the database by deleting and reinserting the changed\n    balances.\n\n    Args:\n        database (Db): Database connection object.\n        table_name (str): Name of the table to update balances.\n        current_balances (pd.DataFrame): DataFrame containing the current balances.\n        updated_balances (pd.DataFrame): DataFrame containing the balances that have changed.\n\n    \"\"\"\n    if updated_balances.empty:\n        return\n\n    ids_to_delete = \",\".join(map(str, updated_balances[\"id\"]))\n    database.delete(table_name, ids_to_delete)\n\n    reinserted_balances = current_balances[current_balances[\"id\"].isin(updated_balances[\"id\"])]\n    database.insert(table_name, reinserted_balances)\n</code></pre>"}]}